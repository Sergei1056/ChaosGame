
// Sergei Rodygin & Kyran Hennings
// Include important C++ libraries here
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <sstream>
#include <vector>

//Make the code easier to type with "using namespace"
using namespace sf;
using namespace std;

int main()
{
	// Create a video mode object
	VideoMode vm(1920, 1080);
	// Create and open a window for the game
	RenderWindow window(vm, "Chaos Game!!", Style::Default);

	// Create text variable and font variable to display directions for the user.
	Text text;
	Font font;
	font.loadFromFile("Lato-Medium.ttf");
	text.setFont(font);
	text.setString("Click on the screen to create vertices! Once you have created 3 or more, press Lshift and right click!");
	text.setCharacterSize(36);
	text.setPosition(140, 100);
	
	vector<Vector2f> vertices;
	vector<Vector2f> points;

	while (window.isOpen())
	{
		/*
		****************************************
		Handle the players input
		****************************************
		*/
		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
			{
				// Quit the game when the window is closed
				window.close();
			}
			if (event.type == sf::Event::MouseButtonPressed)
			{
				if (event.mouseButton.button == sf::Mouse::Left)
				{
					std::cout << "the left button was pressed" << std::endl;
					std::cout << "mouse x: " << event.mouseButton.x << std::endl;
					std::cout << "mouse y: " << event.mouseButton.y << std::endl;

					vertices.push_back(Vector2f(event.mouseButton.x, event.mouseButton.y));
				}
			}
			if (Keyboard::isKeyPressed(Keyboard::LShift))		// This is so that we have a way of allowing the user to say they are done inputting vertices.
			{
				while (window.pollEvent(event))
				{
					points.push_back(Vector2f(event.mouseButton.x, event.mouseButton.y));
				}
			}
		}
		if (Keyboard::isKeyPressed(Keyboard::Escape))
		{
			window.close();
		}
		/*
		****************************************
		Update
		****************************************
		*/
	
		if(points.size() > 0)
		{
			Vector2f vertex;					// Create temporary vertex equal to a random vertex in vertices
			Vector2f out;						// Create an output point to push onto points vector
			for (int i = 0; i < 50000; i++)				// Creates 50,000 points for higher resolution
			{
				vertex = vertices[rand() % vertices.size()];	// The use of vector.size() here is so that we can have as many vertices as the user wants.
				out.x = (points[i].x + vertex.x) / 2;
				out.y = (points[i].y + vertex.y) / 2;
				points.push_back(out);
			}
		}
	
		/*
		****************************************
		Draw
		****************************************
		*/
		window.clear();
		window.draw(text);
		for(int i = 0; i < vertices.size(); i++)			// Draws vertices as they are placed
		{
			RectangleShape rect(Vector2f(10, 10));
			rect.setPosition(Vector2f(vertices[i].x, vertices[i].y));
			rect.setFillColor(Color::Blue);
			window.draw(rect);
		}

		for (int i = 1; i < points.size(); i++)				// Draws points as their positions are calculated
		{
			RectangleShape draw(Vector2f(1, 1));
			draw.setPosition(Vector2f(points[i].x, points[i].y));
			draw.setFillColor(Color::Blue);
			window.draw(draw);
		}
		window.display();
	}
}
